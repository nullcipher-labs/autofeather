# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'autofeather.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from os import listdir
from os.path import isfile, join
from autofeather_photoshop import create_feathered_copy
import filetype


class Ui_MainWindow():
    """PyQt5 class for gui"""

    def setupUi(self, MainWindow):
        """PyQt5 method

        :param MainWindow:
        """

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(557, 361)

        self.dir_path = ''
        self.prefix = ''
        self.postfix = ''
        self.feather = 15
        self.use_percentage = False

        self.box_text = ''

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(39, 19, 471, 206))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.browse_button = QtWidgets.QPushButton(self.formLayoutWidget)
        self.browse_button.setObjectName("browse_button")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.browse_button)
        self.browse_label = QtWidgets.QLabel(self.formLayoutWidget)
        self.browse_label.setObjectName("browse_label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.browse_label)
        self.prefix_label = QtWidgets.QLabel(self.formLayoutWidget)
        self.prefix_label.setObjectName("prefix_label")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.prefix_label)
        self.prefix_input = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.prefix_input.setObjectName("prefix_input")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.prefix_input)
        self.pstfix_label = QtWidgets.QLabel(self.formLayoutWidget)
        self.pstfix_label.setObjectName("pstfix_label")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.pstfix_label)
        self.postfix_input = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.postfix_input.setObjectName("postfix_input")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.postfix_input)
        self.feather_label = QtWidgets.QLabel(self.formLayoutWidget)
        self.feather_label.setObjectName("feather_label")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.feather_label)
        self.feather_input = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.feather_input.setObjectName("feather_input")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.feather_input)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.formLayout.setItem(1, QtWidgets.QFormLayout.LabelRole, spacerItem)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.formLayout.setItem(5, QtWidgets.QFormLayout.LabelRole, spacerItem1)
        self.go_button = QtWidgets.QPushButton(self.centralwidget)
        self.go_button.setGeometry(QtCore.QRect(420, 270, 93, 28))
        self.go_button.setObjectName("go_button")

        self.go_button.clicked.connect(lambda: self.go_clicked())
        self.browse_button.clicked.connect(lambda: self.browse_clicked())

        self.console_text = QtWidgets.QTextEdit(self.centralwidget)
        self.console_text.setGeometry(QtCore.QRect(40, 250, 361, 71))
        self.console_text.setReadOnly(True)
        self.console_text.setObjectName("console_text")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        """PyQt5 method

        :param MainWindow:
        """

        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.browse_button.setText(_translate("MainWindow", "Browse"))
        self.browse_label.setText(_translate("MainWindow", "<Input Directory>"))
        self.prefix_label.setText(_translate("MainWindow", "Prefix"))
        self.pstfix_label.setText(_translate("MainWindow", "Postfix"))
        self.feather_label.setText(_translate("MainWindow", "Feather Value"))
        self.go_button.setText(_translate("MainWindow", "GO!"))

    def get_info(self):
        """a method that returns the parameters fed n by the user to the gui

        :return: a dictionary of parameters
        """
        return {'prefix': self.prefix_input.text(), 'postfix': self.postfix_input.text(),
                'feather': self.feather_input.text()}

    def update_info(self):
        """a method that updates the class attributes according to the parameters entered by the user"""

        d = self.get_info()

        if d['prefix']:
            self.prefix = d['prefix']
        if d['postfix']:
            self.postfix = d['postfix']
        if d['feather']:
            if '%' in d['feather']:
                self.use_percentage = True
                d['feather'] = d['feather'].replace('%', '')
            else:
                self.use_percentage = False

            self.feather = int(d['feather'])

    def go_clicked(self):
        """the method that occurs when the go button is pressed

        takes the parameters fed in by the user, alerts if something is missing (or Photoshop isn't open),
        then iterates through the images in the folder and creates a feathered copy of each
        """

        self.reset_box()
        self.update_info()

        # if image folder was not selected
        if not self.dir_path:
            self.print_to_box('SELECT INPUT FOLDER')
            return

        # if both  prefix and postfix are empty (new files can't have the same names as old)
        if not self.prefix and not self.postfix:
            self.print_to_box('MUST ENTER A VALUE TO AT LEAST ONE OF PREFIX OR POSTFIX')
            return

        # gets a list of image files in the directory
        original_pics = [f for f in listdir(self.dir_path) if self.is_image(join(self.dir_path, f))]

        i = 1
        size = len(original_pics)
        for pic in original_pics:
            try:
                p = self.dir_path + f'\\{pic}'

                # creates the feathered copy
                s = create_feathered_copy(p, self.feather, self.prefix, self.postfix, self.use_percentage)

                self.print_to_box(f'{s} ({i}/{size})')
                i += 1
            except OSError:
                self.print_to_box('PLEASE OPEN PHOTOSHOP')
                return

        self.print_to_box('DONE')

    def browse_clicked(self):
        """the method that runs when the browse button is clicked, used to get image directory"""

        p = QtWidgets.QFileDialog.getExistingDirectory(self, "Open Folder")

        if p:
            self.dir_path = str(p)
            self.browse_label.setText(self.dir_path)

    def print_to_box(self, s):
        """a method that shows a given string (s) in the gui prompt box

        :param s: str, string to show
        """
        self.box_text += s + '\n'
        self.console_text.setText(self.box_text)
        self.console_text.moveCursor(QtGui.QTextCursor.End)

    def reset_box(self):
        """a method that resets the guit prompt box to empty"""
        self.box_text = ''
        self.console_text.setText(self.box_text)
        self.console_text.moveCursor(QtGui.QTextCursor.End)

    @staticmethod
    def is_image(path):
        """a method that takes in a path and returns True if it is an image file and False otherwise (not an image,
        or a dir)

        :param path: str, the path to the file
        :return: bool
        """
        if isfile(path):
            kind = filetype.guess(path)
            return kind is not None and kind.mime.startswith('image/')

        return False
